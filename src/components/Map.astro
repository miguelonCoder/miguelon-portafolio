---
---

<div id="map"></div>
<style is:global>
  #map {
    position: fixed;
    top: 0px;
    bottom: 0px;
    right: 0px;
    left: 0px;
  }

  .maptalks-attribution {
    color: slategrey;
    font-size: small;
  }
  .maptalks-attribution span a {
    color: #1c81b3;
    text-decoration: none !important;
    font-size: small;
  }
</style>
<script>
  import * as maptalks from "maptalks";
  import { ArrayPlusDelay } from "../utilities/arrayDelay";

  import { slide } from "../store.js";
  import { properties } from "../geodata/properties";

  document.addEventListener("DOMContentLoaded", function (event) {
    const map = new maptalks.Map("map", {
      center: [-76.514926, 3.404456],
      zoom: 14,

      //static map options
      scrollWheelZoom: false,
      dragPan: false,

      baseLayer: new maptalks.TileLayer("base", {
        urlTemplate:
          "https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png",
        subdomains: ["a", "b", "c", "d"],
        attribution: `&copy; 
          <a  href="http://osm.org">OpenStreetMap</a> 
          contributors, &copy; 
          <a  href="https://carto.com/">CARTO</a>`,
      }),
    });

    const arrayLayers = [
      'properties'
    ]

    const propertiesLayer = new maptalks.VectorLayer(arrayLayers[0]);

    slide.subscribe((_slide) => {
      switch (_slide) {
        case 0:
          slide0();
          break;
        case 1:
          slide1();
          break;
        case 2:
          slide2();
          break;
        case 3:
          slide3();
          break;
        default:
          null;
      }
    });

    function slide0() {
      map.animateTo(
        {
          zoom: 14,
          center: [-76.514926, 3.404456],
          pitch: 0,
          bearing: 0,
        },
        {
          duration: 500,
          easing: "in",
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 1 finished");
          }
        }
      );
    }

    function slide1() {
      map.animateTo(
        {
          zoom: 13,
          center: [-76.514926, 3.404456],
          pitch: 60,
          bearing: 0,
        },
        {
          duration: 500,
          easing: "in",
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 1 finished");
          }
        }
      );
    }

    function slide2() {
      clearMap('')
      map.animateTo(
        {
          zoom: 13,
          center: [-76.2, 3.45],
          pitch: 30,
          bearing: 10,
        },
        {
          duration: 500,
          easing: "in",
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 2 finished");
          }
        }
      );
    }

    function slide3() {
      map.animateTo(
        {
          zoom: 17,
          center: [-76.532626, 3.460315],
          pitch: 0,
          bearing: 0,
        },
        {
          duration: 500,
          easing: "in",
        },
        (frame) => {
          if (frame.state.playState === "finished") {
            propertiesLayer.addTo(map);
            const geometries = maptalks.GeoJSON.toGeometry(
              properties,
              (geometry) => {
                geometry
                  .setSymbol({
                    lineColor: "#000",
                    lineWidth: 1,
                    polygonFill: "#1c81b3",
                    polygonOpacity: 0.0,
                  })
                  .on("mouseenter", (e) =>
                    console.log(e.target.updateSymbol({ polygonOpacity: 0.9 }))
                  )
                  .on("mouseout", (e) =>
                    console.log(e.target.updateSymbol({ polygonOpacity: 0.3 }))
                  )
                  .addTo(propertiesLayer);
              }
            );
            ArrayPlusDelay(
              geometries,
              function (g: maptalks.Geometry) {
                g.updateSymbol({ polygonOpacity: 0.5 });
              },
              20
            );
          }
        }
      );
    }

    function clearMap(exclude: string) {
      arrayLayers.forEach(layerName => {
        if (layerName !== exclude) {
          if(map.getLayer(layerName)) map.removeLayer(layerName);
        }
      })
    }
  });
</script>
