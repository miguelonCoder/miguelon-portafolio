---
import '../styles/map.css'
---

<div id="map"></div>
<div id="maptalks-attribution-2" class="maptalks-attribution-2 attribution-responsive">
  <img class="img-attribution" src="./images/icon-maptalks.png" alt="">
  <img class="img-attribution" src="./images/icon-openstreetmap.png" alt="">
  <img class="img-attribution" src="./images/icon-carto.png" alt="">
</div>
<script>
  import * as maptalks from "maptalks";
  import { ArrayPlusDelay } from "../utilities/arrayDelay";

  import { slide } from "../store.js";
  import { properties } from "../geodata/properties";

  const GEOMETRY_COLOR = "rgb(46 60 81)";
  const ANIMATION_DURATION = 2000;

  document.addEventListener("DOMContentLoaded", function (event) {
    const map = new maptalks.Map("map", {
      center: [-76.514926, 3.404456],
      zoom: 14,

      //static map options
      scrollWheelZoom: false,
      dragPan: false,

      baseLayer: new maptalks.TileLayer("base", {
        urlTemplate:
          "https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}.png",
        subdomains: ["a", "b", "c", "d"],
        attribution: `&copy; 
          <a  href="http://osm.org">OpenStreetMap</a> 
          contributors, &copy; 
          <a  href="https://carto.com/">CARTO</a>`,
      }),
    });

    const arrayLayers = ["properties"];

    const propertiesLayer = new maptalks.VectorLayer(arrayLayers[0]);

    slide.subscribe((_slide) => {
      switch (_slide) {
        case 0:
          slide0();
          break;
        case 1:
          slide1();
          break;
        case 2:
          slide2();
          break;
        case 3:
          slide3();
          break;
        case 4:
          slide4();
          break;
        case 5:
          slide5();
          break;
        default:
          null;
      }
    });

    function slide0() {
      map.animateTo(
        {
          zoom: 14,
          center: [-76.516026, 3.401456],
          pitch: 0,
          bearing: 0,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 1 finished");
          }
        }
      );
    }

    function slide1() {
      clearMap("");
      map.animateTo(
        {
          zoom: 13,
          center: [-76.514926, 3.404456],
          pitch: 60,
          bearing: 0,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 1 finished");
          }
        }
      );
    }

    function slide5() {
      clearMap("");
      map.animateTo(
        {
          zoom: 13,
          center: [-76.2, 3.45],
          pitch: 30,
          bearing: 10,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 2 finished");
          }
        }
      );
    }

    function slide2() {
      clearMap("");
      propertiesLayer.addTo(map);
      const geometries = maptalks.GeoJSON.toGeometry(properties, (geometry) => {
        geometry
          .setSymbol({
            lineColor: "#000",
            lineWidth: 1,
            polygonFill: GEOMETRY_COLOR,
            polygonOpacity: 0.0,
          })
          .on("mouseenter", (e) =>
            console.log(e.target.updateSymbol({ polygonOpacity: 0.9 }))
          )
          .on("mouseout", (e) =>
            console.log(e.target.updateSymbol({ polygonOpacity: 0.3 }))
          )
          .addTo(propertiesLayer);
      });
      ArrayPlusDelay(
        geometries,
        function (g: maptalks.Geometry) {
          g.updateSymbol({ polygonOpacity: 0.6 });
        },
        20
      );
      map.animateTo(
        {
          zoom: 17,
          center: [-76.532626, 3.460315],
          pitch: 0,
          bearing: 0,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        (frame) => {
          if (frame.state.playState === "finished") {
          }
        }
      );
    }

    function slide3() {
      clearMap("");
      map.animateTo(
        {
          zoom: 17,
          center: [-76.5335626, 3.3726469],
          pitch: 50,
          bearing: 340,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 2 finished");
          }
        }
      );
    }

    function slide4() {
      clearMap("");
      map.animateTo(
        {
          zoom: 9,
          center: [-76.9264689, 3.9464035],
          pitch: 0,
          bearing: 0,
        },
        {
          duration: ANIMATION_DURATION,
          easing: 'out',
        },
        function (frame) {
          if (frame.state.playState === "finished") {
            console.log("animation 2 finished");
          }
        }
      );
    }

    function clearMap(exclude: string) {
      arrayLayers.forEach((layerName) => {
        if (layerName !== exclude) {
          if (map.getLayer(layerName)) map.removeLayer(layerName);
        }
      });
    }
  });
</script>
